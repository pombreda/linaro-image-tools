#!/usr/bin/env python
# Copyright (C) 2011 Linaro
#
# Author: Jeremy Chang <jeremy.chang@linaro.org>
#
# This file is part of Linaro Image Tools.
#
# Linaro Image Tools is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Linaro Image Tools is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Linaro Image Tools.  If not, see <http://www.gnu.org/licenses/>.

import atexit
import os
import sys
import tempfile

from linaro_image_tools import cmd_runner

from linaro_image_tools.media_create.boards import android_board_configs
from linaro_image_tools.media_create.check_device import (
    confirm_device_selection_and_ensure_it_is_ready)
from linaro_image_tools.media_create.hwpack import install_hwpacks
from linaro_image_tools.media_create.partitions import (
    Media,
    setup_partitions,
    setup_android_partitions,
    get_uuid,
    )
from linaro_image_tools.media_create.populate_boot import populate_boot
from linaro_image_tools.media_create.rootfs import populate_partition
from linaro_image_tools.media_create.unpack_binary_tarball import (
    unpack_android_binary_tarball
    )
from linaro_image_tools.media_create import get_android_args_parser
from linaro_image_tools.utils import ensure_command, is_arm_host



# Just define the global variables
TMP_DIR = None
ROOTFS_DIR = None
BOOT_DISK = None
ROOT_DISK = None
SYSTEM_DISK = None
CACHE_DISK = None
DATA_DISK = None
SDCARD_DISK = None


# Registered as the first atexit handler as we want this to be the last
# handler to execute.
@atexit.register
def cleanup_tempdir():
    """Remove TEMP_DIR with all its contents.

    Before doing so, make sure BOOT_DISK and ROOT_DISK are not mounted.
    """
    devnull = open('/dev/null', 'w')
    # ignore non-zero return codes
    for disk in BOOT_DISK, ROOT_DISK, SYSTEM_DISK, CACHE_DISK, DATA_DISK, \
                SDCARD_DISK:
        if disk is not None:
            try:
                cmd_runner.run(['umount', disk],
                      stdout=devnull, stderr=devnull, as_root=True).wait()
            except cmd_runner.SubcommandNonZeroReturnValue:
                pass
    # Remove TMP_DIR as root because some files written there are
    # owned by root.
    if TMP_DIR is not None:
        cmd_runner.run(['rm', '-rf', TMP_DIR], as_root=True).wait()


def ensure_required_commands(args):
    """Ensure we have the commands that we know are going to be used."""
    required_commands = [
        'mkfs.vfat', 'sfdisk', 'mkimage', 'parted']
    if not is_arm_host():
        required_commands.append('qemu-arm-static')
        required_commands.append('qemu-img')
    if args.rootfs in ['ext2', 'ext3', 'ext4']:
        required_commands.append('mkfs.%s' % args.rootfs)
    else:
        required_commands.append('mkfs.btrfs')
    for command in required_commands:
        ensure_command(command)


if __name__ == '__main__':
    parser = get_android_args_parser()
    print "===================================================================="
    print "            linaro-android-media-create is EXPERIMENTAL             "
    print "                                                                    "
    print " The command line parameters as well as the distribution format will" 
    print " be changed and we will not keep backward compatibility for the     " 
    print " current version here.                                              "
    print "===================================================================="
    args = parser.parse_args()

    # If --help was specified this won't execute.
    # Create temp dir and initialize rest of path vars.
    TMP_DIR = tempfile.mkdtemp()
    ROOT_DIR = os.path.join(TMP_DIR, 'root')
    SYSTEM_DIR = os.path.join(TMP_DIR, 'system')
    DATA_DIR = os.path.join(TMP_DIR, 'data')

    BOOT_DISK = os.path.join(TMP_DIR, 'boot-disc')
    ROOT_DISK = os.path.join(TMP_DIR, 'root-disc')
    SYSTEM_DISK = os.path.join(TMP_DIR, 'system-disc')
    CACHE_DISK = os.path.join(TMP_DIR, 'cache-disc')
    DATA_DISK = os.path.join(TMP_DIR, 'userdata-disc')
    SDCARD_DISK = os.path.join(TMP_DIR, 'sdcard-disc')

    board_config = android_board_configs[args.board]

    ensure_required_commands(args)

    media = Media(args.device)
    if media.is_block_device:
        if not confirm_device_selection_and_ensure_it_is_ready(args.device):
            sys.exit(1)
    elif not args.should_format_rootfs or not args.should_format_bootfs:
        print ("Do not use --no-boot or --no-part in conjunction with "
               "--image_file.")
        sys.exit(1)
    else:
        # All good, move on.
        pass


    cmd_runner.run(['mkdir', '-p', ROOT_DIR]).wait()
    cmd_runner.run(['mkdir', '-p', SYSTEM_DIR]).wait()
    cmd_runner.run(['mkdir', '-p', DATA_DIR]).wait()

    unpack_android_binary_tarball(args.root, ROOT_DIR)
    unpack_android_binary_tarball(args.system, SYSTEM_DIR)
    unpack_android_binary_tarball(args.userdata, DATA_DIR)

    # Create partitions    
    boot_partition, root_partition, system_partition, cache_partition, \
        data_partition, sdcard_partition = setup_android_partitions( \
        board_config, media, args.boot_label, args.rfs_label,
        args.rootfs, args.should_create_partitions, args.should_format_bootfs,
        args.should_format_rootfs, args.should_align_boot_part)

    populate_partition(ROOT_DIR, ROOT_DISK, root_partition)
    populate_partition(SYSTEM_DIR + "/system", SYSTEM_DISK, system_partition)
    populate_partition(DATA_DIR + "/data", DATA_DISK, data_partition)
    print "Done creating Linaro Android image on %s" % args.device
